cmake_minimum_required(VERSION 3.28)

# Define the project name
set(PROJECT_NAME "untitled")
project(${PROJECT_NAME} C ASM)

# Find the ARM GCC compiler
find_program(ARM_GCC arm-none-eabi-gcc)

if(NOT ARM_GCC)
    message(FATAL_ERROR "arm-none-eabi-gcc not found!")
endif()

# Set the C and ASM compilers to use ARM GCC
set(CMAKE_C_COMPILER ${ARM_GCC})
set(CMAKE_ASM_COMPILER ${ARM_GCC})

# Set TI SDK path
set(TI_SDK "/home/calper/Downloads/SW-TM4C-2.2.0.295")

# Set the path to the toolchain file
set(CMAKE_TOOLCHAIN_FILE "${CMAKE_CURRENT_SOURCE_DIR}/threadx/cmake/cortex_m4.cmake")
set(THREADX_ARCH "cortex_m4")
set(THREADX_TOOLCHAIN "gnu")

# Floating-point options
set(FPU_FLAGS "-mfpu=fpv4-sp-d16")
set(FLOAT_ABI_FLAGS "-mfloat-abi=hard")

# Ensure ThreadX is built before the project
add_custom_target(build_threadx ALL
    COMMAND ${CMAKE_COMMAND} -B build_threadx -S ${CMAKE_CURRENT_SOURCE_DIR}/threadx -GNinja -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} -DTHREADX_ARCH=${THREADX_ARCH} -DTHREADX_TOOLCHAIN=${THREADX_TOOLCHAIN} -DTHREADX_FP_FLAGS="${FPU_FLAGS} ${FLOAT_ABI_FLAGS}"
    COMMAND ${CMAKE_COMMAND} --build build_threadx
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/threadx
    COMMENT "Building ThreadX library"
)

# Source files
set(SRC_FILES
    src/startup_gcc.c
    src/main.c
    threadx/ports/cortex_m4/gnu/example_build/tx_initialize_low_level.S
)

# Include directories
include_directories(${TI_SDK})
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(${CMAKE_SOURCE_DIR}/threadx/common/inc)
include_directories(${CMAKE_SOURCE_DIR}/threadx/ports/cortex_m4/gnu/inc)

# Set compiler options
set(COMPILER_OPTIONS
    -g
    -DPART_TM4C129ENCPDT
    -mcpu=cortex-m4
    -mthumb
    ${FPU_FLAGS}
    ${FLOAT_ABI_FLAGS}
    -ffunction-sections
    -fdata-sections
    -Wall
    -fstack-usage
    -std=c99
)

# Set assembler options
set(ASM_OPTIONS
    -mcpu=cortex-m4
    -mthumb
    ${FPU_FLAGS}
    ${FLOAT_ABI_FLAGS}
)

# Linker flags
set(LINKER_FLAGS
    -T${CMAKE_SOURCE_DIR}/memory/project0.ld
    -Wl,--gc-sections
    -Wl,--entry=ResetISR
    -nostartfiles
    ${FLOAT_ABI_FLAGS}
)

# Add the executable
add_executable(${PROJECT_NAME} ${SRC_FILES})

# Link the ThreadX library
target_link_libraries(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/threadx/build_threadx/libthreadx.a)

# Add compile options to the target
target_compile_options(${PROJECT_NAME} PRIVATE ${COMPILER_OPTIONS})

# Add linker flags to the target
target_link_options(${PROJECT_NAME} PRIVATE ${LINKER_FLAGS})

# Ensure the main project build depends on the ThreadX build
add_dependencies(${PROJECT_NAME} build_threadx)
